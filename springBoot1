从spring到spring-bootspring是一个非常强大的框架，已经形成了一个生态，java开发人员基本绕不过spring。名副其实，spring的确是给广大的开发者带来了一个“春天”。然而，多年来，spring框架饱受非议的一点就是大量的xml配置以及错综复杂的依赖管理。想想我们搭建一个spring工程，引入mvc、aop、database等，光是xml的配置就让人眼花缭乱，更不用说复杂的jar包依赖管理。尽管spring做了不少优化，如通过注解的方式代替部分xml配置，但是总体而言，在配置管理方面，仍然需要投入大量的精力。spring-boot的出现，非常好地解决了这个问题，极大地简化了开发人员的工作，给spring带来了新的“春天”。同时，spring-boot也为微框架、微服务提供了一个思路和示范。spring-boot简介看看spring-boot官网上描述的吧spring-boot使创建基于spring的独立的、产品级别的应用更加容易，你可以“just run”。特性如下：1、创建独立的spring应用程序2、嵌入的tomcat、jetty，以至于你都不需要去部署war包了3、提供了一个'starter' poms，简化了maven配置4、在可能的场景下都自动完成了spring的相关配置..................总结一下如果你搭建基于spring-boot的应用，那么tomcat等服务器不用安装了，也不用把工程导出war包部署到服务器上了。spring-boot程序会打成jar包，它包含一个嵌入式的tomcat，运行jar时会启动该tomcat服务器，完全不需要你去部署。同时pom文件的配置极其简便，一个dependency解决所有spring的相关依赖如ioc、aop、mvc、web、json、log等等，不用手写任何spring的配置文件，甚至连web.xml都不需要了。这样的一个spring-boot应用程序，你可以just run！官方网站：http://projects.spring.io/spring-boot/通过spring-boot，可以非常方便地实现restful服务。官网上有简单的示例，可迅速上手。这里不多介绍，不过似乎打成jar包，运行嵌入式的tomcat，这样的方式目前在某些场合下还没有被广泛认可。所以，还是用传统的方式去部署吧。传统的方式就是打成war包部署到tomcat服务器上。虽然不如jar包运行嵌入式tomcat来的方便，不过也能用到spring-boot的其它特性，也是非常不错的。
1.搭建个QuickStart Maven 项目，注意package 选War
2.POM.XML 
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">  <modelVersion>4.0.0</modelVersion>  <groupId>wine</groupId>  <artifactId>yzw</artifactId>  <version>0.0.1-SNAPSHOT</version>  <packaging>war</packaging>  <parent>  <groupId>org.springframework.boot</groupId>  <artifactId>spring-boot-starter-parent</artifactId>  <version>1.3.0.RELEASE</version> </parent>
 <properties>  <java.version>1.8</java.version> </properties>
 <dependencies>  <dependency>   <groupId>org.springframework.boot</groupId>   <artifactId>spring-boot-starter-web</artifactId>  </dependency>
  <dependency>   <groupId>org.springframework.boot</groupId>   <artifactId>spring-boot-starter-tomcat</artifactId>   <scope>provided</scope>  </dependency> </dependencies></project>

 spring-boot要求java1.7以上版本，我们就用1.8吧。加入如上信息后，在工程上右键选择maven--update project，然后工程上的错误消失。3、新建Application.java    GreetingController.java     Greeting.java     目录结构如下。注意，需要确保Application.java在所有controller的父层目录中。

3.父层Class  (Application)
package com.huawei;
import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.boot.context.web.SpringBootServletInitializer;
@SpringBootApplicationpublic class Application  extends SpringBootServletInitializer{ @Override    protected SpringApplicationBuilder configure(SpringApplicationBuilder application)     {        return application.sources(Application.class);    }}

@SpringBootApplication  这是一个非常方便、非常有用的注解，一下子就实现了以下几个注解的功能（1）@Configuration  将Application这个类标记为该应用上下文的原始bean定义。（2）@EnableAutoConfiguration  告诉spring boot添加位于classpath上的所有配置，包括各种xml配置、properties配置。（3）@EnableWebMvc  一般来说对于一个spring mvc的应用，我们需要添加@EnableWebMvc注解，但是spring boot只要看见classpath上有spring-webmvc，就会自动添加该注解。（4）@ComponentScan  该注解告诉spring搜索其它的components, configurations和services，搜索范围是添加该注解的目录及子目录。因此这里需要确保该类位于所有controller的父目录中。

4.GreetingController
package com.huawei.controller;
import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;
import com.huawei.model.Greeting;
@RestController@RequestMapping("/greeting")public class GreetingController{ private static final Logger log = LoggerFactory.getLogger(GreetingController.class);  @RequestMapping(value="/hello", method=RequestMethod.GET) public Greeting hello() {  log.info("hello world");    Greeting greeting = new Greeting();  greeting.setId(1);  greeting.setName("Lucy");  greeting.setMessage("Hello World");    return greeting; }}

通过注解可以看到，这是一个纯RestController，作用也很明显，提供restful服务。此外，可以看到，spring-boot已经集成了logback记录日志，拥有logback默认配置。

5.Greeting.java  普通类
private int id;
private String name;
private String message;

6.部署访问
OK，这样一个spring应用就完成了，零配置，没有spring的配置文件，也没有web.xml，快速上手。部署运行将该程序部署到tomcat中吧，然后启动tomcat服务器。在浏览器输入    http://localhost:8080/spring-boot/greeting/hello可以得到如下结果     {"id":1, "name":"Lucy", "message":"Hello World"}OK， just run it !




